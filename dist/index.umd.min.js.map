{"version":3,"file":"index.umd.min.js","sources":["../src/store.js","../src/helpers.js","../src/index.js"],"sourcesContent":["import { ref, readonly, computed } from \"vue\";\r\nimport { convertBreakpointsToMediaQueries, subscribeToMediaQuery, listeners, sanitiseBreakpoints, selectBreakpoints } from \"./helpers\";\r\n\r\nexport const DEFAULT_BREAKPOINTS = {\r\n\t\t\t\txs: 576,\r\n\t\t\t\tsm: 768,\r\n\t\t\t\tmd: 992,\r\n\t\t\t\tlg: 1200,\r\n\t\t\t\txl: 1400,\r\n\t\t\t\txxl: Infinity,\r\n\t\t\t}\r\n\r\nconst state = {\r\n  mqAvailableBreakpoints: ref({}),\r\n  currentBreakpoint: ref(\"\")\r\n}\r\n\r\nexport const setAvailableBreakpoints = (v) => state.mqAvailableBreakpoints.value = v;\r\nexport const mqAvailableBreakpoints = readonly(state.mqAvailableBreakpoints);\r\n\r\nexport const setCurrentBreakpoint = (v) => state.currentBreakpoint.value = v;\r\nexport const currentBreakpoint = readonly(state.currentBreakpoint);\r\n\r\nexport function updateBreakpoints(breakpoints) {\r\n  // Remove any existing MQ listeners\r\n  for (let i = listeners.length - 1; i >= 0; i--) {\r\n    const { mql, cb } = listeners[i];\r\n    mql.removeEventListener('change', cb);\r\n    listeners.splice(i,1);\r\n  }\r\n\r\n  sanitiseBreakpoints(breakpoints);\r\n\r\n  // Save new breakpoints to reactive variable\r\n  setAvailableBreakpoints(breakpoints);\r\n  // Create css media queries from breakpoints\r\n  const mediaQueries = convertBreakpointsToMediaQueries(breakpoints);\r\n\r\n  // Add new MQ listeners\r\n  for (const key in mediaQueries) {\r\n    const mediaQuery = mediaQueries[key];\r\n    const enter = () => { setCurrentBreakpoint(key) }\r\n    subscribeToMediaQuery(mediaQuery, enter)\r\n  }\r\n}\r\n\r\nexport function shouldRender(mq) {\r\n        const isMqArray = Array.isArray(mq);\r\n        const isMqPlus = !isMqArray.value && /\\+$/.test(mq) === true;\r\n        const isMqMinus = !isMqArray.value && /-$/.test(mq) === true;\r\n        const isMqRange = !isMqArray.value && /^\\w*-\\w*/.test(mq) === true;\r\n        const activeBreakpoints = computed(() => {\r\n            if (isMqArray) return mq;\r\n            else if (!isMqPlus && !isMqMinus && !isMqRange) return [mq];\r\n            else {\r\n                return selectBreakpoints({mqProp: mq, isMqPlus: { value: isMqPlus}, isMqMinus: { value: isMqMinus}, isMqRange: { value: isMqRange} });\r\n            }\r\n        });\r\n\r\n        return activeBreakpoints.value.includes(currentBreakpoint.value)\r\n}","import json2mq from \"json2mq\";\r\nimport { mqAvailableBreakpoints } from \"./store\";\r\nexport const listeners = [];\r\n\r\nexport function convertBreakpointsToMediaQueries(breakpoints) {\r\n\tconst keys = Object.keys(breakpoints);\r\n\tconst values = keys.map((key) => breakpoints[key]);\r\n\tconst breakpointValues = [0, ...values.slice(0, -1)];\r\n\tconst mediaQueries = breakpointValues.reduce(\r\n\t\t(accumulator, current, index) => {\r\n\t\t\tconst options = Object.assign(\r\n\t\t\t\t{\r\n\t\t\t\t\tminWidth: current,\r\n\t\t\t\t},\r\n\t\t\t\tindex < keys.length - 1\r\n\t\t\t\t\t? { maxWidth: breakpointValues[index + 1] - 1 }\r\n\t\t\t\t\t: {}\r\n\t\t\t);\r\n\t\t\tconst mediaQuery = json2mq(options);\r\n\t\t\treturn Object.assign(accumulator, {\r\n\t\t\t\t[keys[index]]: mediaQuery,\r\n\t\t\t});\r\n\t\t},\r\n\t\t{}\r\n\t);\r\n\treturn mediaQueries;\r\n}\r\n\r\nexport function selectBreakpoints({\r\n\tmqProp,\r\n\tisMqPlus = { value: false },\r\n\tisMqMinus = { value: false },\r\n\tisMqRange = { value: false },\r\n}) {\r\n\tconst ents = Object.entries(mqAvailableBreakpoints.value);\r\n\tif (ents.length === 0) return [];\r\n\tif (isMqPlus.value) mqProp = mqProp.replace(/\\+$/, \"\");\r\n\telse if (isMqMinus.value) mqProp = mqProp.replace(/-$/, \"\");\r\n\telse if (isMqRange.value) {\r\n\t\tmqProp = mqProp.split(\"-\");\r\n\t\tif (!mqProp || mqProp.length !== 2)\r\n\t\t\tthrow new Error(\"Invalid MQ range provided\");\r\n\t}\r\n\tlet eligible;\r\n\tif (isMqRange.value) {\r\n\t\tlet from = ents.find(([key, value]) => key == mqProp[0].trim());\r\n\t\tif (!from || from.length === 0)\r\n\t\t\tthrow new Error(\r\n\t\t\t\t\"Range from breakpoint (\" + mqProp[0].trim() + \") not found\"\r\n\t\t\t);\r\n\t\tlet to = ents.find(([key, value]) => key == mqProp[1].trim());\r\n\t\tif (!to || to.length === 0)\r\n\t\t\tthrow new Error(\r\n\t\t\t\t\"Range to breakpoint (\" + mqProp[1].trim() + \") not found\"\r\n\t\t\t);\r\n\t\tif (from[1] > to[1]) [from, to] = [to, from];\r\n\t\teligible = ents.filter(\r\n\t\t\t([key, value]) => value >= from[1] && value <= to[1]\r\n\t\t);\r\n\t} else {\r\n\t\tconst base = ents.find(([key, value]) => key == mqProp);\r\n\t\tif (isMqPlus.value)\r\n\t\t\teligible = ents.filter(([key, value]) => value >= base[1]);\r\n\t\telse if (isMqMinus.value)\r\n\t\t\teligible = ents.filter(([key, value]) => value <= base[1]);\r\n\t}\r\n\teligible.sort((a, b) => a[1] - b[1]);\r\n\treturn eligible.map((el) => el[0]);\r\n}\r\n\r\nexport function subscribeToMediaQuery(mediaQuery, enter) {\r\n\tconst mql = window.matchMedia(mediaQuery);\r\n\tconst cb = ({ matches }) => {\r\n\t\tif (matches) enter();\r\n\t};\r\n\tlisteners.push({ mql, cb });\r\n\tif (mql.addEventListener && typeof mql.addEventListener === \"function\") {\r\n\t\tmql.addEventListener(\"change\", cb); //subscribing\r\n\t} else {\r\n\t\tmql.addListener(\"change\", cb);\r\n\t}\r\n\tcb(mql); //initial trigger\r\n}\r\n\r\nexport function sanitiseBreakpoints(breakpoints) {\r\n\tfor (let bp in breakpoints) {\r\n\t\tif (![\"string\", \"number\"].includes(typeof bp) || !bp)\r\n\t\t\tthrow new Error(\"Invalid or missing breakpoint key\");\r\n\t\tif (typeof breakpoints[bp] === \"string\")\r\n\t\t\tbreakpoints[bp] = parseFloat(\r\n\t\t\t\tbreakpoints[bp].replace(/[^0-9]/g, \"\")\r\n\t\t\t);\r\n\t\tif (typeof breakpoints[bp] !== \"number\" || breakpoints[bp] < 0)\r\n\t\t\tthrow new Error(\r\n\t\t\t\t\"Invalid breakpoint value for \" +\r\n\t\t\t\t\tbp +\r\n\t\t\t\t\t\". Please use a valid number.\"\r\n\t\t\t);\r\n\t\tif (!breakpoints[bp])\r\n\t\t\tthrow new Error(\r\n\t\t\t\t\"No valid breakpoint value for \" + bp + \" was found\"\r\n\t\t\t);\r\n\t}\r\n}\r\n","export * from './component';\r\nimport { setCurrentBreakpoint, currentBreakpoint, updateBreakpoints, DEFAULT_BREAKPOINTS } from \"./store\";\r\nimport { readonly } from \"vue\";\r\n\r\nconst install = function (app, { breakpoints = DEFAULT_BREAKPOINTS, defaultBreakpoint = 'sm' } = {}) {  \r\n  let hasSetupListeners = false\r\n  setCurrentBreakpoint(defaultBreakpoint);\r\n\r\n  app.provide('updateBreakpoints', updateBreakpoints);\r\n  app.provide('mq', readonly(currentBreakpoint));\r\n\r\n  // Init reactive component\r\n  app.mixin({\r\n    computed: {\r\n      $mq() {\r\n        return currentBreakpoint.value;\r\n      }\r\n    },\r\n    mounted() {\r\n      if (!hasSetupListeners) {\r\n        updateBreakpoints(breakpoints)\r\n        hasSetupListeners = true\r\n      }\r\n    }\r\n  })\r\n  app.config.globalProperties.$mqAvailableBreakpoints = breakpoints;\r\n}\r\nexport default {\r\n  install\r\n}\r\n"],"names":["DEFAULT_BREAKPOINTS","xs","sm","md","lg","xl","xxl","Infinity","state","mqAvailableBreakpoints","ref","currentBreakpoint","setCurrentBreakpoint","readonly","v","value","updateBreakpoints","breakpoints","i","listeners","length","mql","cb","removeEventListener","splice","bp","includes","Error","parseFloat","replace","sanitiseBreakpoints","mediaQueries","keys","Object","values","map","key","breakpointValues","slice","reduce","accumulator","current","index","options","assign","minWidth","maxWidth","mediaQuery","json2mq","convertBreakpointsToMediaQueries","enter","window","matchMedia","matches","push","addEventListener","addListener","subscribeToMediaQuery","install","app","defaultBreakpoint","hasSetupListeners","provide","mixin","computed","$mq","mounted","config","globalProperties","$mqAvailableBreakpoints"],"mappings":"k1CAGO,IAAMA,EAAsB,CAC/BC,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,GAAI,KACJC,GAAI,KACJC,IAAKC,EAAAA,GAGHC,EAAQ,CACZC,uBAAwBC,MAAI,IAC5BC,kBAAmBD,MAAI,KAMZE,GAFyBC,WAASL,EAAMC,wBAEjB,SAACK,UAAMN,EAAMG,kBAAkBI,MAAQD,IAC9DH,EAAoBE,WAASL,EAAMG,mBAEzC,SAASK,EAAkBC,OAE3B,IAAIC,EAAIC,EAAUC,OAAS,EAAGF,GAAK,EAAGA,IAAK,OAC1BC,EAAUD,GAAtBG,IAAAA,IAAKC,IAAAA,GACbD,EAAIE,oBAAoB,SAAUD,GAClCH,EAAUK,OAAON,EAAE,GAXgB,IAACJ,GCmEjC,SAA6BG,OAC9B,IAAIQ,KAAMR,EAAa,KACtB,CAAC,SAAU,UAAUS,WAAgBD,MAAQA,EACjD,MAAM,IAAIE,MAAM,wCACc,iBAApBV,EAAYQ,KACtBR,EAAYQ,GAAMG,WACjBX,EAAYQ,GAAII,QAAQ,UAAW,MAEN,iBAApBZ,EAAYQ,IAAoBR,EAAYQ,GAAM,EAC5D,MAAM,IAAIE,MACT,gCACCF,EACA,oCAEER,EAAYQ,GAChB,MAAM,IAAIE,MACT,iCAAmCF,EAAK,eDrE1CK,CAAoBb,GAdkBH,EAiBdG,EAjBoBT,EAAMC,uBAAuBM,MAAQD,MAmB3EiB,EChCD,SAA0Cd,OAC1Ce,EAAOC,OAAOD,KAAKf,GACnBiB,EAASF,EAAKG,KAAI,SAACC,UAAQnB,EAAYmB,MACvCC,GAAoB,YAAMH,EAAOI,MAAM,GAAI,YAC5BD,EAAiBE,QACrC,SAACC,EAAaC,EAASC,aAChBC,EAAUV,OAAOW,OACtB,CACCC,SAAUJ,GAEXC,EAAQV,EAAKZ,OAAS,EACnB,CAAE0B,SAAUT,EAAiBK,EAAQ,GAAK,GAC1C,IAEEK,EAAaC,UAAQL,UACpBV,OAAOW,OAAOJ,UACnBR,EAAKU,KAASK,qGAGjB,IDaqBE,CAAiChC,cAG3CmB,IC+BN,SAA+BW,EAAYG,OAC3C7B,EAAM8B,OAAOC,WAAWL,GACxBzB,EAAK,cAAG+B,SACAH,KAEd/B,EAAUmC,KAAK,CAAEjC,IAAAA,EAAKC,GAAAA,IAClBD,EAAIkC,kBAAoD,mBAAzBlC,EAAIkC,iBACtClC,EAAIkC,iBAAiB,SAAUjC,GAE/BD,EAAImC,YAAY,SAAUlC,GAE3BA,EAAGD,GDvCAoC,CAFmB1B,EAAaK,IAClB,WAAQxB,EAAqBwB,WAFxC,IAAMA,KAAOL,IAAPK,GCrCN,IAAMjB,EAAY,SCyBV,CACbuC,QAxBc,SAAUC,gEAAuE,OAAhE1C,YAAAA,aAAcjB,QAAqB4D,kBAAAA,aAAoB,OAClFC,GAAoB,EACxBjD,EAAqBgD,GAErBD,EAAIG,QAAQ,oBAAqB9C,GACjC2C,EAAIG,QAAQ,KAAMjD,WAASF,IAG3BgD,EAAII,MAAM,CACRC,SAAU,CACRC,sBACStD,EAAkBI,QAG7BmD,mBACOL,IACH7C,EAAkBC,GAClB4C,GAAoB,MAI1BF,EAAIQ,OAAOC,iBAAiBC,wBAA0BpD"}